---
- hosts: master
  become: true

  vars_files:
   - vars/vars.yml

  tasks:

   - name: Update master server.
     apt:
      update_cache: yes
      cache_valid_time: 3600

   - name: Install packages curl, ca-certificates, gnupg.
     apt:
      name: "{{ item.package }}"
      state: present
     with_items:
      - package: "curl"
      - package: "ca-certificates"
      - package: "gnupg"
   #################################### HOSTNAME CONFIGURATION ############################
   - name: Set hostname.
     command: hostnamectl set-hostname k8s-master-node

   - name: Add master host to /etc/hosts file.
     lineinfile:
      path: /etc/hosts
      line: "{{ item.node }}"
      state: present
     with_items:
      - node: "{{ master_ip }} {{ master_hostname }}"
      - node: "{{ slave_one_ip }} {{ slave_one_hostname }}"
      - node: "{{ slave_two_ip }} {{ slave_two_hostname }}"

   ######################################## ADD KERNEL MODULES ############################
   - name: Add overlay module and br_netfilter module as kernel modules to boot at load time.
     lineinfile:
      path: "/etc/modules-load.d/modules.conf"
      line: "{{ item.name }}"
      state: present
     with_items:
      - name: "overlay"
      - name: "br_netfilter"

   - name: Load newly added kernel modules in working memory without waiting for system restart.
     command: "sudo modprobe {{ item.module }}"
     with_items:
      - module: "overlay"
      - module: "br_netfilter"
  ######################################## ADD K8S NETWORKING MODULES ###########################

   - name: Create a file for k8s modules.
     file:
      path: "/etc/sysctl.d/99-kubernetes-cri.conf"
      state: touch

   - name: Add k8s modules to /etc/sysctl.d/99-kubernetes-cri.conf.
     lineinfile:
      path: /etc/sysctl.d/99-kubernetes-cri.conf
      line: "{{ item.module }}"
      state: present
     with_items:
      - module: "net.bridge.bridge-nf-call-iptables=1"
      - module: "net.ipv4.ip_forward=1"
      - module: "net.bridge.bridge-nf-call-ip6tables=1"
   ######################################## INSTALL CONTAINERD #################################
   - name: Install containerd on master node. (other docker packages are not needed, just extra software)
     import_tasks: tasks/docker-on-ubuntu.yml

   - name: Output a default containerd configuration to /etc/containerd/config.toml file.
     shell: |
      sudo containerd config default | sudo tee /etc/containerd/config.toml

   - name: Restart containerd service.
     service:
      name: containerd
      state: restarted
   ######################################## TURN SWAP OFF  #################################
   - name: Turn swap off.
     command: |
      sudo swapoff -a

   - name: Restart containerd daemon.
     service:
      name: containerd
      state: restarted
   ######################################## k8s INSTALLATION  #################################

   - name: Add k8s apt repository and install kubect, kubeconf, kubeadm.
     import_tasks: tasks/k8s_packages_on_ubuntu.yml

   - name: Configure master node with kubeadm command.
     command: "kubeadm init --pod-network-cidr {{ cidr_range }} --kubernetes-version {{ k8s_v }}"
     args:
      creates: /etc/kubernetes/admin.conf #skip this task if this file is created

     
     
   - name: Create .kube directory for the user.
     file:
      path: "/home/{{ k8s_linux_user }}/.kube"
      state: directory
      owner: "{{ k8s_linux_user }}"
      group: "{{ k8s_linux_user }}"
      mode: '0700'

   - name: Copy Kubernetes admin.conf to user's kube config
     copy:
      src: /etc/kubernetes/admin.conf
      dest: "/home/{{ k8s_linux_user }}/.kube/config"
      owner: "{{ k8s_linux_user }}"
      group: "{{ k8s_linux_user }}"
      mode: '0600'
      remote_src: true

   - name: Verify permissions of the kube config. Ensure user has premissions on a file, not only a directory.
     file:
      path: "/home/{{ k8s_linux_user }}/.kube/config"
      owner: "{{ k8s_linux_user }}"
      group: "{{ k8s_linux_user }}"
      mode: '0600'



  ################################################### CALICO PLUGIN ################################
   - name: Check if Calico is already installed.
     shell: kubectl get pods -n kube-system | grep calico-kube-controllers
     register: calico_check
     failed_when: false #task never fails; default - when it returns non-zero exit code (rc)
     changed_when: false #task is marked as changed if it executes a command that modifies a sys; always unchanged here
     #or u can see if file /etc/kubernetes/manifests/calico.yaml exists on a master node.


   - name: Install networking calico plugin in order nodes to see each other.
     shell: kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.25.1/manifests/calico.yaml
     when: calico_check.rc != 0

   - name: Generate kubeadm join comand and print a token for joining slave nodes to the cluster.
     shell: kubeadm token create --print-join-command
     register: join_command

   - name: Debug join command output
     debug:
      msg: "{{ join_command.stdout }}"

   - name: Store a join command into a variable.
     set_fact:
      join_command: "{{ join_command.stdout }}"

   - name: Save the join command to a file.
     copy:
      content: |
       join_command: "{{ join_command }}"
      dest: "./vars/join.yml"
     delegate_to: localhost
